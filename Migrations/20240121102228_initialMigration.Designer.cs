// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyfirstBlackMetalAlbum.com.Models;

#nullable disable

namespace MyfirstBlackMetalAlbum.com.Migrations
{
    [DbContext(typeof(MyFirstBlackMetalAlbumContext))]
    [Migration("20240121102228_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LessonId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.UserCommentsViewModel", b =>
                {
                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserProgressId")
                        .HasColumnType("int");

                    // b.Property<int>("UsersUserIntId")
                    b.Property<int>("UserIntId")
                         .HasColumnType("int");

                    b.HasIndex("UserProgressId");

                    //b.HasIndex("UsersUserIntId");
                    b.HasIndex("UserIntId");

                    b.ToTable((string)null);

                    b.ToView(null, (string)null);
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.UserProgress", b =>
                {
                    b.Property<int>("UserProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserProgressId"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsCompleted");

                    b.Property<int>("LessonId")
                        .HasColumnType("int")
                        .HasColumnName("LessonId");

                    b.Property<int>("UserIntId")
                        .HasColumnType("int")
                        .HasColumnName("UserIntId");

                    //b.Property<int?>("UsersUserIntId")
                      //  .HasColumnType("int");

                    b.HasKey("UserProgressId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserIntId");

                 //   b.HasIndex("UsersUserIntId");

                    b.ToTable("UserProgress", (string)null);
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.Users", b =>
                {
                    b.Property<int>("UserIntId")
                        .HasColumnType("int");

                    b.Property<int>("AdvancedProgress")
                        .HasColumnType("int");

                    b.Property<int>("BeginnerProgress")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IntermediateProgress")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<int>("RecordingProgress")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserIntId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("UserComments", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIntId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("UserIntId");

                    b.ToTable("UserComment");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.Comment", b =>
                {
                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.UserCommentsViewModel", b =>
                {
                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.UserProgress", "UserProgress")
                        .WithMany()
                        .HasForeignKey("UserProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.Users", "Users")
                        .WithMany()
                      //  .HasForeignKey("UsersUserIntId")
                        .HasForeignKey("UserIntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProgress");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.UserProgress", b =>
                {
                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserIntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.Users", "User") // << I changed this from Null to User to create a nav property
                                                                                //to stop an error, but it gave another error instead
                        .WithMany("UserProgresses")
                   //     .HasForeignKey("UsersUserIntId");
                   .HasForeignKey("UserIntId");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.Users", b =>
                {
                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.UserProgress", "UserProgress")
                        .WithMany()
                        .HasForeignKey("UserIntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProgress");
                });

            modelBuilder.Entity("UserComments", b =>
                {
                    b.HasOne("MyfirstBlackMetalAlbum.com.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserIntId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyfirstBlackMetalAlbum.com.Models.Users", b =>
                {

                    //I edited this section in the hopes of getting rid of the navigation error
                    // that keeps popping up whenever i create a new migration
                    b.HasMany("MyfirstBlackMetalAlbum.com.Models.UserProgress", "UserProgresses")
                            .WithOne("User")
                            .HasForeignKey("UserIntId")
                            .OnDelete(DeleteBehavior.Cascade)
                            .IsRequired();

                    b.Navigation("UserProgresses");
                }); 
#pragma warning restore 612, 618
        }
    }
}
