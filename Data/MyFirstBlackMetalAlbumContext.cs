// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable 
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace MyfirstBlackMetalAlbum.com.Models;

public partial class MyFirstBlackMetalAlbumContext : DbContext
{
    public MyFirstBlackMetalAlbumContext(DbContextOptions<MyFirstBlackMetalAlbumContext> options)
        : base(options)
    {
    }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseLoggerFactory(LoggerFactory.Create(builder => builder.AddConsole()))
                      .EnableSensitiveDataLogging();
    }

    // public virtual DbSet<TestTable> TestTable { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<Comment> Comments { get; set; }

    public virtual DbSet<UserComments> UserComment { get; set; }

    public DbSet<UserCommentsViewModel> UserCommentsVisualModels { get; set; }

    public virtual DbSet<UserProgress> UserProgress { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    // Include ProgressPercentage here if it's part of the Users entity
    public int ProgressPercentage { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<UserProgress>(entity =>
        {
            entity.ToTable("UserProgress");
            entity.HasKey(up => up.UserProgressId);

            // Configure UserIntId and LessonId as foreign keys
            entity.HasOne(up => up.User)
            .WithMany(u => u.UserProgresses)  // Specify the navigation property
            .HasForeignKey(up => up.UserIntId)
            .IsRequired();

            entity.HasOne(up => up.Lesson)
                .WithMany()
                .HasForeignKey(up => up.LessonId)
                .IsRequired();

            // Configure other properties as needed
        });


        modelBuilder.Entity<Users>(entity =>
        {
            entity.ToTable("Users");
            entity.HasKey(e => e.UserIntId);
            entity.Property(e => e.UserIntId).UseIdentityColumn(); // This line configures UserIntId as an identity column
            entity.Property(e => e.Email).IsRequired().HasMaxLength(100);
            entity.Property(e => e.PasswordHash).IsRequired().HasMaxLength(128);
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.Username).IsRequired().HasMaxLength(50);

         entity.HasMany(u => u.UserProgresses)  // Specify the navigation property
        .WithOne(up => up.User)  // Specify the inverse navigation property in UserProgress
        .HasForeignKey(up => up.UserIntId)
        .IsRequired();
        });


        modelBuilder.Entity<Comment>().HasNoKey(); //might be a good idea to give it a key later


             // Configure the Lesson entity
             modelBuilder.Entity<Lesson>(entity =>
             {
                 // Define the primary key
                 entity.HasKey(e => e.LessonId);

                 // Add any other configurations for the Lesson entity
                 // For example, you can specify column types, nullability, etc.
                 // Example:
                 // entity.Property(e => e.Title).IsRequired().HasMaxLength(100);
             });



        modelBuilder.Entity<UserComments>(entity =>
        {
            entity.HasKey(e => e.CommentId); // Specify the primary key
            entity.Property(e => e.CommentId).ValueGeneratedOnAdd(); // Let the database generate the primary key value
            entity.Property(e => e.Text).IsRequired().HasColumnType("nvarchar(max)");

            entity.HasOne(u => u.User)
                  .WithMany()
                  .HasForeignKey(u => u.UserIntId);

            // If UserName is supposed to reference a different property in Users, specify the correct relationship here
            // entity.HasOne(u => u.User)
            //       .WithMany()
            //       .HasForeignKey(u => u.UserName);
        });

        base.OnModelCreating(modelBuilder); // Move this line outside the entity configuration block


        // Mark UserCommentsViewModel as NotMapped
        modelBuilder.Entity<UserCommentsViewModel>().HasNoKey().ToView(null);
             modelBuilder.Entity<UserCommentsViewModel>().Ignore(e => e.Comments);

            /* modelBuilder.Entity<TestTable>(entity =>
             {
                 entity
                     .HasNoKey()
                     .ToTable("test table");

                 entity.Property(e => e.Name)
                     .HasMaxLength(10)
                     .IsFixedLength()
                     .HasColumnName("name");
             }); */


          


             modelBuilder.Entity<UserComments>(entity =>
             {
                 // Define the UserComments entity
                 entity.Property(e => e.Text).IsRequired().HasColumnType("nvarchar(max)");
             }); 

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}